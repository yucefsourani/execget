#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#  execget.py
#  
#  Copyright 2017 youcefsourani <youssef.m.sourani@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#
import os
import sys
import pwd
import gi
gi.require_version("Gtk","3.0")
from gi.repository import Gtk,Gio,GdkPixbuf


def get_bin_path(command):
    path = [p for p in os.environ["PATH"].split(":") if os.path.isdir(p)]
    result = "Not Available"
    for location in path:
        try:
            for dirname,dirs,files in os.walk(location):
                for file_ in files:
                    if file_ == command:
                        file_ = os.path.join(dirname,file_)
                        if os.path.isfile(file_):
                            result = file_
        except:
            continue
    return result
                    

def parse_desktop_entry_file(name,desktopentryfile):
    result = {}
    name = name.replace(" ","").lower()
    try:
        with open(desktopentryfile) as mf:
            for line in mf:
                if line:
                    try:
                        line = line.split("=",1)
                        result.setdefault(line[0].strip(),line[1].strip())
                    except:
                        continue
    except:
        return False
    if name == "*":#disable this options
        name = ""
    if name == "*":
        try:
            if "Name" in result.keys() and "Exec" in result.keys():
                exec__ = result["Exec"]
                return [result["Name"],[exec__],get_bin_path(exec__.split()[0]),desktopentryfile]
        except:
            return False
    else:    
        try:
            if "Name" in result.keys() and "Exec" in result.keys():
                if name == result["Name"].replace(" ","").lower():
                    exec__ = result["Exec"]
                    return [result["Name"],[exec__],get_bin_path(exec__.split()[0]),desktopentryfile]
        except:
            return False
    return False
    
                

def read_all_desktop_entry_files(name):
    home = pwd.getpwuid(os.geteuid()).pw_dir
    locations = [os.path.join(home,".local/share/applications"),
                 os.path.join(home,".local/share/flatpak/exports/share/applications"),
                 "/usr/share/applications",
                 "/usr/local/share/applications",
                 "/var/lib/flatpak/exports/share/"]
                 
    locations = [l for l in locations if os.path.isdir(l)]
    result = []
    for location in locations:
        for dirname,dirs,files in os.walk(location):
            for file_ in files:
                desktopentryfile = os.path.join(dirname,file_)
                if desktopentryfile.endswith(".desktop"):
                    check = parse_desktop_entry_file(name,desktopentryfile)
                    if check :
                        if len(result)!=0:
                            result[0][1].append(check[1])
                            result[0][2]+=" &&  "+check[2]
                            result[0][3]+=" &&  "+check[3]
                        else:
                            result.append(check)
                        
    return result


class AppWindow(Gtk.ApplicationWindow):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.set_border_width(10)
        self.set_size_request(600, 400)
        self.set_resizable(False)
        self.icon = "org.github.yucefsourani.execget.png" if os.path.isfile("org.github.yucefsourani.execget.png") else "/usr/share/pixmaps/org.github.yucefsourani.execget.png"
        
        
        #vb
        vb = Gtk.VBox(spacing=10)
        #hb
        hb = Gtk.HBox(spacing=10)
        #vmainbox
        vmainbox = Gtk.VBox(spacing=30)
        hbox1 = Gtk.HBox(spacing=10)
        hbox2 = Gtk.HBox(spacing=10)
        hbox3 = Gtk.HBox(spacing=10)
        hbox4 = Gtk.HBox(spacing=10)
        hbox5 = Gtk.HBox(spacing=10)
        hbox6 = Gtk.HBox(spacing=10)
        hbox0 = Gtk.HBox(spacing=10)
        
        self.filenameentry = Gtk.Entry()
        self.filenameentry.set_placeholder_text("Enter Program Name...")
        self.filenameentry.set_max_length(63)
        
        argv_check_vbox = Gtk.VBox(spacing=2)
        argv_label= Gtk.Label("argv")
        self.argv_check = Gtk.CheckButton()
        self.argv_check.set_tooltip_text("Get Command with  argv")
        self.argv_check.set_active(True) 


        self.label1 = Gtk.Label("Name : ")
        self.label2 = Gtk.Label("Command : ")
        self.label3 = Gtk.Label("Path : ")
        self.label0 = Gtk.Label("File : ")
        
        self.label1.set_line_wrap(True)
        self.label2.set_line_wrap(True)
        self.label3.set_line_wrap(True)
        self.label0.set_line_wrap(True)
        self.label1.set_selectable(True)
        self.label2.set_selectable(True)
        self.label3.set_selectable(True)
        self.label0.set_selectable(True)
        
        button_vbox = Gtk.VBox(spacing=5)
        run_button = Gtk.Button("Get")
        run_button.connect("clicked",self.on_run_button_clicked)
        
        about_button = Gtk.Button("About")
        about_button.connect("clicked",self.on_about_button_clicked)
        

        argv_check_vbox.pack_start(argv_label,True,True,0)
        argv_check_vbox.pack_start(self.argv_check,True,True,0)
        hbox1.pack_start(self.filenameentry,True,True,0)
        hbox1.pack_start(argv_check_vbox,False,False,0)
        
        hbox2.pack_start(self.label1,False,False,0)
        hbox3.pack_start(self.label2,False,False,0)
        hbox4.pack_start(self.label3,False,False,0)
        hbox0.pack_start(self.label0,False,False,0)
        hbox5.pack_start(run_button,True,True,0)
        hbox6.pack_start(about_button,True,True,0)


        
        button_vbox.pack_start(hbox5,True,True,0)
        button_vbox.pack_start(hbox6,True,True,0)
        
        vmainbox.pack_start(hbox1,True,True,0)
        vmainbox.pack_start(hbox2,True,True,0)
        vmainbox.pack_start(hbox3,True,True,0)
        vmainbox.pack_start(hbox4,True,True,0)
        vmainbox.pack_start(hbox0,True,True,0)
        vmainbox.pack_start(button_vbox,True,True,0)
        hb.pack_start(vmainbox,True,True,0)
        vb.pack_start(hb,True,True,0)
        self.add(vb)
        self.show_all()

        
    def on_run_button_clicked(self,button):
        if self.get_resizable():
            self.set_resizable(False)			
        name = self.filenameentry.get_text()
        if  name:
            result = read_all_desktop_entry_files(name)
            if len(result) != 0:
                self.label1.set_label("Name : {}".format(result[0][0]))
                if len(result[0][1])>1 or any(len(i)>60 for i in result[0][1]) or len(result[0][2])>60 or len(result[0][3])>60:
                    if not self.get_resizable():
                        self.set_resizable(True)
                if len(result[0][1])>1:
                    if self.argv_check.get_active() and len(result[0][1])>1:
                        self.label2.set_label("Command : {}".format(result[0][1][0]+" && "+" && ".join(l for i in result[0][1][1:] for l in i)))
                    else:
                        self.label2.set_label("Command : {}".format(result[0][1][0]+" && "+" && ".join(l.split()[0] for i in result[0][1][1:] for l in i)))
                else:
                    if self.argv_check.get_active():
                        self.label2.set_label("Command : {}".format(result[0][1][0]))
                    else:
                        self.label2.set_label("Command : {}".format(result[0][1][0].split()[0]))
                self.label3.set_label("Path : {}".format(result[0][2]))
                self.label0.set_label("File : {}".format(result[0][3]))

                    
            else:
                self.label1.set_label("Name {}".format(name))
                self.label2.set_label("Command : Unknown")
                self.label3.set_label("Path : Unknown")
                self.label0.set_label("File : Unknown")   
        else:
            self.label1.set_label("Name Unknown".format(name))
            self.label2.set_label("Command : Unknown")
            self.label3.set_label("Path : Unknown")
            self.label0.set_label("File : Unknown")
        
        
    

    def on_about_button_clicked(self,b):
        authors = ["Youssef Sourani <youssef.m.sourani@gmail.com>"]
        about = Gtk.AboutDialog()
        about.set_transient_for(self)
        about.set_program_name("Execget")
        about.set_version("0.1")
        about.set_copyright("Copyright Â© 2017 Youssef Sourani")
        about.set_comments("Simple Tool To Get Exec Command From Desktop Entry")
        about.set_website("https://arfedora.blogspot.com")
        about.set_logo(GdkPixbuf.Pixbuf.new_from_file(self.icon))
        about.set_authors(authors)
        about.set_license_type(Gtk.License.GPL_3_0)
        translators = ("translator-credit")
        if translators != "translator-credits":
            about.set_translator_credits(translators)
        about.run()
        about.destroy()
            

class Application(Gtk.Application):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, application_id="org.github.yucefsourani.execget",
                         flags=Gio.ApplicationFlags.FLAGS_NONE,
                         **kwargs)
        self.window = None

    def do_startup(self):
        Gtk.Application.do_startup(self)

    def do_activate(self):
        if not self.window:
            self.window = AppWindow(application=self, title="Execget")

        self.window.present()

    def on_quit(self, action, param):
        self.quit()

if __name__ == "__main__":
    app = Application()
    app.run(sys.argv)

